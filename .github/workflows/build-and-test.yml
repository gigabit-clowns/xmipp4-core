name: Build and Test

on:
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  build_and_test_with_cmake:
    name: CMake
    strategy:
      matrix:
        os:
        - ubuntu-latest
        compiler: 
        - {cc: gcc, cxx: g++}
        - {cc: clang, cxx: clang++}

        include:
        - os: macos-latest
          compiler: {cc: clang, cxx: clang++}
        - os: windows-latest
          compiler: {cc: cl, cxx: cl}
  
    env:
      BUILD_TYPE: Debug
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install memcheck tool
        uses: ./.github/composites/install-memtool
        id: install-memtool

      - name: Configure and build with CMake
        uses: threeal/cmake-action@v2
        with:
          source-dir: ${{ github.workspace }}
          build-dir: "${{ github.workspace }}/build"
          c-compiler: ${{ matrix.compiler.cc }}
          cxx-compiler: ${{ matrix.compiler.cxx }}
          options: |
            CMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          run-build: true
          build-args: --config ${{ env.BUILD_TYPE }}
      
      - name: Run tests with memory check
        uses: ./.github/composites/run-memtool
        id: run-memtool
        #with:
        #  drmemory: ${{ steps.install-memtool.outputs.drmemory }}
      
      - name: Show memory leak logs (if exist)
        if: steps.run-memtool.outputs.exist-memleaks == 'true'
        uses: ./.github/composites/show-memleaks
        with:
          test-numbers: ${{ steps.run-memtool.outputs.test-numbers }}

  build_and_test_with_pip:
    name: pip
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - windows-latest
  
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install xmipp4-core with pip
        run: pip install . -v

      # TODO run tests with pip

  build_and_test_with_conda:
    name: conda
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        #- windows-latest # FIXME
  
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: true
          activate-environment: "" # Base is required for conda-build

      - name: Install conda-build and conda-verify
        run: conda install -y conda-build conda-verify

      - name: Build with conda
        run: conda build conda

      # TODO run tests with conda
