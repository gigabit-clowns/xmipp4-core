name: Deploy release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main

  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.os }} (${{ matrix.architectures }})
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            architectures: "x86_64 i686"
          - os: ubuntu-24.04-arm
            architectures: "aarch64"
          - os: macos-latest
            architectures: "x86_64 arm64 universal2"
          - os: windows-latest
            architectures: "AMD64 x86 ARM64"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_ARCHS: "${{ matrix.architectures }}"
          CIBW_BUILD: "cp313-*" # Python agnostic, pick any version
          CIBW_BUILD_VERBOSITY: 1
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacs
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -l ./dist

      - name: Upload to PyPI # TODO enable this in the future
        if: false
        uses: pypa/gh-action-pypi-publish@release/v1

  build_conda:
    name: Build conda packages
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        #- windows-latest # FIXME
  
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: true
          activate-environment: "" # Base is required for conda-build

      - name: Install conda-build and conda-verify
        run: conda install -y conda-build conda-verify

      - name: Build with conda
        run: conda build conda --output-folder builds/

      - name: Upload conda package
        uses: actions/upload-artifact@v4
        with:
          name: conda-${{ matrix.os }}
          path: |
            builds/**/xmipp4-core*.tar.bz2
            builds/**/xmipp4-core*.conda

  upload_conda:
    name: Upload to conda-forge
    needs: [build_conda]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacs
        uses: actions/download-artifact@v4
        with:
          pattern: conda-*
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -l ./dist
      
      # TODO upload to conda-forge

  build_doxygen: 
    name: Build Doxygen documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y doxygen
    
    - name: Configure and build with CMake
      uses: threeal/cmake-action@v2
      with:
        source-dir: ${{ github.workspace }}
        build-dir: "${{ github.workspace }}/build"
        options: |
          XMIPP4_CORE_BUILD_DOC=ON
          XMIPP4_CORE_BUILD_SPDLOG=ON
          BUILD_TESTING=OFF
        run-build: true
        build-args: --target doxygen

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ github.workspace }}/build/doc/doxygen/html

  deploy_doxygen_to_gh_pages:
    name: Deploy Doxygen documentation to GitHub Pages
    needs: [build_doxygen]
    if: startsWith(github.event.ref, 'refs/tags/v')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write 
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  create_developer_release:
    name: Create development release
    needs: [build_wheels, build_sdist, build_conda]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    env:
      TAG_NAME: "development"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download artifacs
        uses: actions/download-artifact@v4
        with:
          pattern: "{cibw,conda}-*"
          path: dist
          merge-multiple: true

      - name: Create or update development tag
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'action@github.com'
          git add dist
          git commit -m "Add pre-built binaries"
          git tag -fa $TAG_NAME -m 'Update development tag with main branch'
          git push origin $TAG_NAME --force
      
      - name: Update development release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: $TAG_NAME
          name: "Development build"
          body: >-
            This is an automated release containing binaries built with 
            with the head of the main branch.
          draft: false
          prerelease: true
          files: dist/**
