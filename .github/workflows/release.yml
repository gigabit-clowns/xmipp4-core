name: Generate new release

on:
  workflow_dispatch:

  pull_request:

jobs:
  tag_and_release:
    name: Generate new tag & GitHub release
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check authorisation level of dispatching user
      uses: ./.github/composites/authorize-user
      with:
        allowed_roles: "admin maintain"
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Retrieve tag name, release name & changelog
      id: variables
      run: |
        export TAG_NAME=$(python3 -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        export RELEASE_NAME="v$TAG_NAME"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "Version: $TAG_NAME"
        echo "Release name: $RELEASE_NAME"

        export CHANGELOG_BODY=$(awk '/## /{if (found) exit} {if (/## /) found=1; else if (found) print}' CHANGELOG.md)
        echo "Changelog: $CHANGELOG_BODY"
        echo "Done"
    
    - name: Fail
      run: exit 1
      
    - name: Generate tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: ${{ steps.variables.outputs.TAG_NAME }}
        tag_prefix: ''
        
    - name: Create a GitHub release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.tag_version.outputs.new_tag }}
        name: ${{ steps.variables.outputs.RELEASE_NAME }}
        body: ${{ steps.tag_version.outputs.changelog }}

  build_wheels:
    name: Build wheels for ${{ matrix.os }} (${{ matrix.architectures }})
    needs: [tag_and_release]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            architectures: "x86_64 i686"
          - os: ubuntu-24.04-arm
            architectures: "aarch64"
          - os: macos-latest
            architectures: "x86_64 arm64 universal2"
          - os: windows-latest
            architectures: "AMD64 x86 ARM64"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_ARCHS: "${{ matrix.architectures }}"
          CIBW_BUILD: "cp313-*" # Python agnostic, pick any version
          CIBW_BUILD_VERBOSITY: 1
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    needs: [tag_and_release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -l ./dist

      - name: Upload to PyPI
        if: false
        uses: pypa/gh-action-pypi-publish@release/v1 # TODO enable this in the future

  build_doxygen: 
    name: Build Doxygen documentation
    needs: [tag_and_release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y doxygen
    
    - name: Configure and build with CMake
      uses: threeal/cmake-action@v2
      with:
        source-dir: ${{ github.workspace }}
        build-dir: "${{ github.workspace }}/build"
        options: |
          XMIPP4_CORE_BUILD_DOC=ON
          XMIPP4_CORE_BUILD_SPDLOG=ON
          BUILD_TESTING=OFF
        run-build: true
        build-args: --target doxygen

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ github.workspace }}/build/doc/doxygen/html

  deploy_doxygen_to_gh_pages:
    name: Deploy Doxygen documentation to GitHub Pages
    needs: [build_doxygen]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write 
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
